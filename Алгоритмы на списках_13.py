"""
# Ищем кол-во работников заробатывающих менее 20000
zrp = [22000, 15000, 19500, 24000, 20000, 12365, 23000]

count = 0
for i in zrp:
    if(i < 20000):
        count += 1
print(f"Кол-во работников заробатывающих менее 20000 равно: {count} чел.")

# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Ищем где припаркован авто
n = "311"       # Ищем где припаркован авто с номером 311
parking = ["-", "-", "132", "155", "-", "521", "-", "311", "555", "839"]

park = None
p1 = 0

while (park == None and p1 < len(parking)):
    if (parking[p1] == n):
        park = p1
    p1 += 1
if (park != None):
    print(f"Автомобиль стоит на {park} месте")
else:
    print("Автомобиля на стоянке нет")

# Ту же программу можно написать через цикл for =====================================================================

n = "311"       # Ищем где припаркован авто с номером 311
parking = ["-", "-", "132", "155", "311", "521", "-", "-", "555", "839"]

park = None

for i in range(len(parking)):
    if(parking[i] == n):
        park = i # Приравниваем park к индексу в списке который укажет на номер авто(значение) который выведем в print
#       break                    # Чтобы не перебирать весь список до конца после нахождения нужного номера авто "311"

if (park != None):
    print(f"Автомобиль стоит на {park} месте")
else:
    print("Автомобиля на стоянке нет")

# Преимущество цикла while перед for в том что операция перебора заканчивается сразу после того как (park != None)
# В то время как for будет перебирать все элементы если не воспользоваться break

# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Сортировка пузырьком (последовательное сравнение двух соседних элемнтов)
sites = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]     # Список с количеством просмотра страниц

for i in range(len(sites) - 1):             # range(9) всего 9
    for j in range(len(sites) - 1 - i):     # range(9-0) => range(9-1) => range(9-2) **** (9,8,7) всего 45
        if (sites[j] < sites[j + 1]):       # Сравниваем текущий элемент с которым находится правее (j+1)
            sites[j], sites[j + 1] = sites[j + 1], sites[j] # Меняем местами (если условие выше верно)
print(sites)


#                                              ++++++++ ПОЯСНЕНИЯ +++++++++
#                                                      цикл[ ] = 0  1  2  3  4  5  6  7  8  9
#                                   Изначальная позиция sites = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# цикл[0] => if(1<2)  =>  [j]=1 < [j+1]=2  =>  1,2=2,1  =>      [2, 1, 3, 4, 5, 6, 7, 8, 9, 10]
# цикл[1] => if(1<3)  =>  [j]=1 < [j+1]=3  =>  1,3=3,1  =>      [2, 3, 1, 4, 5, 6, 7, 8, 9, 10]
# цикл[2] => if(1<4)  =>  [j]=1 < [j+1]=4  =>  1,4=4,1  =>      [2, 3, 4, 1, 5, 6, 7, 8, 9, 10]
#                                                               *******************************
#                                                               [2, 3, 4, 5, 6, 7, 8, 9, 1, 10]
# цикл[8] => if(1<10)  =>  [j]=1 < [j+1]=10  =>  1,10=10,1  =>  [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]

# ++ ЦИКЛ i УВЕЛИЧИВАЕТСЯ НА 1 ++(в j уменьшается общее кол-во циклов на 1 "нет смысла сравнивать 2 и 1 в конце списка")
#                                                      цикл[ ] = 0  1  2  3  4  5  6  7  8  9
#                   После прохождения первого цикла (j) sites = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]
# цикл[0] => if(2<3)  =>  [j]=2 < [j+1]=3  =>  2,3=3,2  =>      [3, 2, 4, 5, 6, 7, 8, 9, 10, 1]
# цикл[1] => if(2<4)  =>  [j]=2 < [j+1]=4  =>  2,4=4,2  =>      [3, 4, 2, 5, 6, 7, 8, 9, 10, 1]
#                                                               *******************************
#                                                               [3, 4, 5, 6, 7, 8, 9, 2, 10, 1]
# цикл[7] => if(2<10)  =>  [j]=2 < [j+1]=10  =>  2,10=10,2  =>  [3, 4, 5, 6, 7, 8, 9, 10, 2, 1]

# В итоге получаем элемент с максимальным значением переходит на первое место => sites = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# ВАЖНО    spisok[i] => это значение(цифра) которая хранится в списке в данной итерации(56, 321, 434...)
#          j = i - 1 => i без [] это номер цикла(1, 2, 3...)

# Сортировка вставками
sites = [2, 5, 1, 10, 50]
for i in range(1, len(sites)):           # начинаем с первого элемента в range в данном случае с цифры 2
    n = sites[i]                         # Значение индекса списка sites[1] (в первой итерации)  равен = числу 5
    j = i - 1                            # В данном случае j будет равен 1 - 1 = 0 потому что i без [] это номер цикла
                                         # Тут j сформированый индекс для вставки

    while(j >= 0 and sites[j] < n):
        sites[j + 1] = sites[j]           # Последующая sites[j+1]=5 станет на первое место списка вмеcто sites[j]=2 [5=>2]
        j -= 1                            # Уменьшаем индекс j (при первой итерации получаем 0-1 = -1)
    sites[j + 1] = n                      # Устанавливаем сохранённое значение в найденное место 2=n

print(sites)
"""
"""
                                                ++++++++ ПОЯСНЕНИЯ +++++++++
[2, 5, 1, 10, 50]
 0  1  2   3   4

for i in range(1, 5):                             (1) всего 4

n = 5 (sites[i]1)
j = 0 "(i - 1) = 1 - 1 = 0"

    while (0 >= 0 and 2 < 5)         sites[j] = > (j=0 из строки выше) = > 2
        sites[j + 1] = sites[j]      5 = 2  (5 становится на j0)
        j = -1 (0 - 1)
   
    sites[-1 + 1] = sites[j] = n => 5         [5, 2, 1, 10, 50]
==============================================================================
[5, 2, 1, 10, 50]                                 (2)
 0  1  2  3   4

n = 1 (sites[i]2)
j = 1 (2 - 1)

    while (1 >= 0 and 2 < 1)	условие неверно цикл 2 не выполнится
===============================================================================
[5, 2, 1, 10, 50]                                 (3)
 0  1  2  3   4

n = 10 (sites[i]3)
j = 2  (3 - 1)

    while(2 >= 0 and 1 < 10)
        sites[j + 1] = sites[j]		    10 = 1 (10 становится на j2)
        j = 1 ( 2 -1) 				    j = 1
    while(1 >= 0 and 2 < 10)
        sites[j + 1] = sites[j]		    10 = 2 (10 становится на j1)
        j = 0 (1 - 1) 				    j = 0
    while(0 >= 0 and 5 < 10)
        sites[j + 1] = sites[j]  		10 = 5 (10 становится на j0)
        j = -1 (0 - 1)				    j = -1 (условие while прекращается)

    sites[-1+1]=(sites[j]0) = n => 10   [10, 5, 2, 1, 50]
===============================================================================
[10, 5, 2, 1, 50]                                (4)
 0   1  2  3  4

n = 50 (sites[i]4)
j = 3  (4-1)

    while (3 >= 0 and 1 < 50)
        sites[j + 1] = sites[j]         50 = 1  (50 становится на j3)
        j = 2 (3 - 1)                   j = 2
    while (2 >= 0 and 2 < 50)
        sites[j + 1] = sites[j]         50 = 2  (50 становитсяна j2)
        j = 1 (2 - 1)                   j = 1
    while (1 >= 0 and 5 < 50)
        sites[j + 1] = sites[j]         50 = 5  (50 становитсяна j1)
        j = 0 (1 - 1)                   j = 0
    while (0 >= 0 and 10 < 50)
        sites[j + 1] = sites[j]         50 = 10 (50 становится на j0)
        j = -1(0 - 1)                   j = -1  (условие while прекращается)

    sites[-1+1]=(sites[j]0) = n => 50   [50, 10, 5, 2, 1]
    
РЕЗУЛЬТАТ: [50, 10, 5, 2, 1]
===============================================================================
"""
"""
# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Сортировка символов

def stringSort(s):
    ret = ""
    code = []
    for i in s:                         # Формируем список кодов
        code.append(ord(i))             # [1071, 1070, 1069, 1068...]
    for i in range(1, len(code)):       # Сортируем сначала коды символов по "сортировке вставками" методом выше
        n = code[i]
        j = i - 1

        while(j >= 0 and code[j] > n):  # Здесь в отличии от прошлого алгоритма используем знак > потому что строку
            code[j + 1] = code[j]       # формируем с меньшего значения (A = 1040, Я = 1071) [А, Б, В, Г...]
            j -= 1
        code[j + 1] = n                 # [1040, 1041, 1042, 1043...]

    for i in code:                      # Формируем строку по кодам
        ret += chr(i)                   # Заносим упорядоченные коды => символы в переменную накопитель
    return ret                          # Возвращаем переменную со строкой (символами)

m = "ЯЮЭЬЫЪЩШЧЦХФУТСРПОНМЛКЙИЗЖЕДГВБА"
m = stringSort(m)
print(m)

# РЕЗУЛЬТАТ: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Встроенная сортировка

# .sort()
a = [3, 2, 1, 5, 4]
print(a)                                # [3, 2, 1, 5, 4]

a.sort(reverse=True)
print(f"В обратном порядке: {a}")       # В обратном порядке: [5, 4, 3, 2, 1]

a.sort()
print(f"В порядке по умолчанию: {a}")   # В порядке по умолчанию: [1, 2, 3, 4, 5]

# Список будет хранится в памяти отформатированым, если хотим оставить первоначальный порядок то пользуемся sorted()

a = [3, 2, 1, 5, 4]
print(f"Исходящий список: {a}")               # Исходящий список: [3, 2, 1, 5, 4]
print(f"Вывод отсортированного: ", end="")    # Вывод отсортированного: 1 2 3 4 5

for i in sorted(a):
    print(i, "", end="")                      #  "" - даёт расстояние между цифрами / end="" - запись в одну строку
                                              # i - значение индекса(цифра) (0i=1, 1i=2, 2i=3, 3i=4, 4i=5)
print(f"\nИсходный список не изменился: {a}") # Исходный список не изменился: [3, 2, 1, 5, 4]

# Сортировка слов хранящихся в списке
b = ["Молоко", "Кефир", "Чай", "Кофе", "Варенье"]
print(b)                                      # ['Молоко', 'Кефир', 'Чай', 'Кофе', 'Варенье']
b = sorted(b)
print(b)                                      # ['Варенье', 'Кефир', 'Кофе', 'Молоко', 'Чай']

# в порядке убывания
b = ["Молоко", "Кефир", "Чай", "Кофе", "Варенье"]
print(b)                                      # ['Молоко', 'Кефир', 'Чай', 'Кофе', 'Варенье']
b = sorted(b, reverse=True)                   # В порядке убывания (От большего к меньшему)
print(b)                                      # ['Чай', 'Молоко', 'Кофе', 'Кефир', 'Варенье']

# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Сортировка двумерного списка
a = [[16, 6, 11, 7], [5, 12, 13, 14], [3, 9, 15, 10], [1, 4, 8, 2]]
print(sorted(a)) # РЕЗУЛЬТАТ: [[1, 4, 8, 2], [3, 9, 15, 10], [5, 12, 13, 14], [16, 6, 11, 7]]

# Функция возвращающая двумерный список индексов двумерного списка
def getIndexArray(myList):
    ret = []
    for i in range(len(myList)):
        for j in range(len(myList[i])):
            ret.append([])                       # []
            ret[(i * len(myList)) + j].append(i) # 0 0 0 0 1 1 1 1 2 2 ...
            ret[(i * len(myList)) + j].append(j) # 0 1 2 3 0 1 2 3 0 1 ...
                                                 # [(i * len(myList)) + j] => [0 * 4 + 0], [0 * 4 + 1], [0 * 4 + 2]...
    return ret

# РЕЗУЛЬТАТ: [0, 0][0, 1][0, 2][0, 3][1, 0][1, 1][1, 2][1, 3][2, 0][2, 1][2, 2][2, 3][3, 0][3, 1][3, 2][3, 3]

# Теперь сортируем по полученым индексам
def getSortedArray(myList, idx):
    for i in range(len(idx) - 1):
        for j in range(len(idx) - 1 - i):                    # 16 - 1 - 0, 16 - 1 - 1, 16 - 1 - 2...
            if (myList[idx[j][0]][idx[j][1]] > myList[idx[j + 1][0]][idx[j + 1][1]]):

                myList[idx[j][0]][idx[j][1]], myList[idx[j + 1][0]][idx[j + 1][1]] = myList[idx[j + 1][0]][idx[j + 1][1]], myList[idx[j][0]][idx[j][1]]
    return myList

a = [[16, 6, 11, 7], [5, 12, 13, 14], [3, 9, 15, 10], [1, 4, 8, 2]]
idx = getIndexArray(a)                           # Вызываем функцию "getIndexArray" и передаём в неё список "a"

print(f"Исходный список:\n{a}\n\nОтсортированный:\n{getSortedArray(a, idx)}")

# Исходный список:
# [[16, 6, 11, 7], [5, 12, 13, 14], [3, 9, 15, 10], [1, 4, 8, 2]]

# Отсортированный:
# [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]


# Более простой метод(В функции преобразуем двумерный список в одномерный => сортируем => преобразуем обратно в двумерный)

def getSortedArray(myList):
    l = []

# Преобразуем в одномерный список
    for i in range(len(myList)):        # i это => [16, 6, 11, 7] - 0 *** [5, 12, 13, 14] - 1 *** [3, 9, 15, 10] - 2 *** [1, 4, 8, 2] - 3
        for j in range(len(myList[i])): # myList[i] => Первый цикл (0) [16, 6, 11, 7] где j0 = 16, j1 = 6, j2 = 11, j3 = 7
            l.append(myList[i][j])      # [0][0] = 16, [0][1] = 6, [0][2] = 11, [0][3] = 7, [1][0] = 5, [1][1] = 12...
#                                       ПОЛУЧАЕМ:l = [16, 6, 11, 7, 5, 12, 13, 14, 3, 9, 15, 10, 1, 4, 8, 2] ОДНИМ СПИСКОМ

# Используем "встроенную сортировку"
    for i in range(1, len(l)):          # len(l) = 16 => (1, 16)
        n = l[i]                        # n = 16
        j = i - 1                       # j = 0 (1-1)
        while(j >= 0 and l[j] > n):     # Первая итерация [0 >= 0 and 16 > 6] Условие верно "l[j]=l[0]=16 "Значение j берём из строки выше"
            l[j+1] = l[j]               # Присваиваем значению j1 значение j0 т.е 6 и 16 меняются местами
            j -= 1                      # j станет равно 0 и цикл  while больше будет не верен
        l[j + 1] = n                    # Теперь ячейка [j + 1] которая раньше была равна 6 станет равна 16 => [j+1]=16

# После выполнения этого цикла получаем такой одномерный список: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]

# Теперь преобразуем обратно в двумерный последовательно
    for i in range(len(myList)):
        for j in range(len(myList[i])):             #   16   =   l[0]=1  |   6      l[1]=2  | ...   13   =  l[6]=7
            myList[i][j] = l[i * len(myList) + j]   # [0][0] = l[0*4+0] | [0][1] = l[0*4+1] | ... [1][2] = l[1*4+2]
    return myList                                   #  i  j                i  j                    i  j

# j   0   1  2   3  <= элементы строк
a = [[16, 6, 11, 7],  # 0 i строка
     [5, 12, 13, 14], # 1 i строка
     [3, 9, 15, 10],  # 2 i строка
     [1, 4, 8, 2]]    # 3 i строка

print(f"Исходный список:\n{a}")
a = getSortedArray(a)
print(f"Отсортированный список:\n{a}")

# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Инверсия списка
a = [5, 3, 1, 9, 4, 7, 2]

print(f"До инверсии: {a}")

for i in range(len(a) // 2):
    a[i], a[len(a) - i - 1] = a[len(a) - i - 1], a[i]

print(f"После инверсии: {a}")
"""
# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Сдвиг списка (влево)
keys = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(keys)
print(f"Видимые кнопки: {keys[0:5]}")
print("Сдвигаем...")

tmp = keys[0]                                   # Запомнили цифру "1" (поместили в переменную tmp индекс [0] списка keys который равен 1)
for i in range(len(keys) - 1):                  #  (0, 9)                                                      len(keys) - 1 = 10 - 1 = 9
    keys[i] = keys[i + 1]                       # 1 = 2 (2 становится на место 1) *** В самой первой итерации i = 0
keys[i + 1] = tmp                               # цифра 1 теперь ссылается на самый конец списка
print(f"Видимые кнопки: {keys[0:5]}")
# РЕЗУЛЬТАТ: [2, 3, 4, 5, 6] СДВИГ <<==

print("\n")
#   #   #   #   #   #   #   #   #   #

# Сдвиг списка (вправо)
keys = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(keys)
print(f"Видимые кнопки: {keys[5:10]}")
print("Сдвигаем...")

tmp = keys[len(keys) - 1]                        # Запомнили последнюю цифру списка (10)
for i in range(len(keys) - 1, 0, -1):            # Отсчёт на понижение (10, 0, -1)
    keys[i] = keys[i - 1]                        # 10 = 9 (9 становится на место 10) *** В самой первой итерации i = 0
keys[0] = tmp                                    # Самая последняя цифра теперь ссылается на начало списка

print(keys)
print(f"Видимые кнопки: {keys[0:5]}")
# РЕЗУЛЬТАТ: [10, 1, 2, 3, 4]  СДВИГ ==>>

# ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


