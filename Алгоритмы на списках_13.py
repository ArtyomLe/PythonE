# Ищем кол-во работников заробатывающих менее 20000
zrp = [22000, 15000, 19500, 24000, 20000, 12365, 23000]

count = 0
for i in zrp:
    if(i < 20000):
        count += 1
print(f"Кол-во работников заробатывающих менее 20000 равно: {count} чел.")

# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Ищем где припаркован авто
n = "311"       # Ищем где припаркован авто с номером 311
parking = ["-", "-", "132", "155", "-", "521", "-", "311", "555", "839"]

park = None
p1 = 0

while (park == None and p1 < len(parking)):
    if (parking[p1] == n):
        park = p1
    p1 += 1
if (park != None):
    print(f"Автомобиль стоит на {park} месте")
else:
    print("Автомобиля на стоянке нет")

# Ту же программу можно написать через цикл for =====================================================================

n = "311"       # Ищем где припаркован авто с номером 311
parking = ["-", "-", "132", "155", "311", "521", "-", "-", "555", "839"]

park = None

for i in range(len(parking)):
    if(parking[i] == n):
        park = i # Приравниваем park к индексу в списке который укажет на номер авто(значение) который выведем в print
#       break                    # Чтобы не перебирать весь список до конца после нахождения нужного номера авто "311"

if (park != None):
    print(f"Автомобиль стоит на {park} месте")
else:
    print("Автомобиля на стоянке нет")

# Преимущество цикла while перед for в том что операция перебора заканчивается сразу после того как (park != None)
# В то время как for будет перебирать все элементы если не воспользоваться break

# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Сортировка пузырьком (последовательное сравнение двух соседних элемнтов)
sites = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]     # Список с количеством просмотра страниц

for i in range(len(sites) - 1):             # range(9) всего 9
    for j in range(len(sites) - 1 - i):     # range(9-0) => range(9-1) => range(9-2) **** (9,8,7) всего 45
        if (sites[j] < sites[j + 1]):       # Сравниваем текущий элемент с которым находится правее (j+1)
            sites[j], sites[j + 1] = sites[j + 1], sites[j] # Меняем местами (если условие выше верно)
print(sites)

"""
#                                              ++++++++ ПОЯСНЕНИЯ +++++++++
#                                                      цикл[ ] = 0  1  2  3  4  5  6  7  8  9
#                                   Изначальная позиция sites = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# цикл[0] => if(1<2)  =>  [j]=1 < [j+1]=2  =>  1,2=2,1  =>      [2, 1, 3, 4, 5, 6, 7, 8, 9, 10]
# цикл[1] => if(1<3)  =>  [j]=1 < [j+1]=3  =>  1,3=3,1  =>      [2, 3, 1, 4, 5, 6, 7, 8, 9, 10]
# цикл[2] => if(1<4)  =>  [j]=1 < [j+1]=4  =>  1,4=4,1  =>      [2, 3, 4, 1, 5, 6, 7, 8, 9, 10]
#                                                               *******************************
#                                                               [2, 3, 4, 5, 6, 7, 8, 9, 1, 10]
# цикл[8] => if(1<10)  =>  [j]=1 < [j+1]=10  =>  1,10=10,1  =>  [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]

# ++ ЦИКЛ i УВЕЛИЧИВАЕТСЯ НА 1 ++(в j уменьшается общее кол-во циклов на 1 "нет смысла сравнивать 2 и 1 в конце списка")
#                                                      цикл[ ] = 0  1  2  3  4  5  6  7  8  9
#                   После прохождения первого цикла (j) sites = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]
# цикл[0] => if(2<3)  =>  [j]=2 < [j+1]=3  =>  2,3=3,2  =>      [3, 2, 4, 5, 6, 7, 8, 9, 10, 1]
# цикл[1] => if(2<4)  =>  [j]=2 < [j+1]=4  =>  2,4=4,2  =>      [3, 4, 2, 5, 6, 7, 8, 9, 10, 1]
#                                                               *******************************
#                                                               [3, 4, 5, 6, 7, 8, 9, 2, 10, 1]
# цикл[7] => if(2<10)  =>  [j]=2 < [j+1]=10  =>  2,10=10,2  =>  [3, 4, 5, 6, 7, 8, 9, 10, 2, 1]

# В итоге получаем элемент с максимальным значением переходит на первое место => sites = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
"""
# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# ВАЖНО    spisok[i] => это значение(цифра) которая хранится в списке в данной итерации(56, 321, 434...)
#          j = i - 1 => i без [] это номер цикла(1, 2, 3...)

# Сортировка вставками
sites = [2, 5, 1, 10, 50]
for i in range(1, len(sites)):           # начинаем с первого элемента в range в данном случае с цифры 2
    n = sites[i]                         # Значение индекса списка sites[1] (в первой итерации)  равен = числу 5
    j = i - 1                            # В данном случае j будет равен 1 - 1 = 0 потому что i без [] это номер цикла
                                         # Тут j сформированый индекс для вставки

    while(j >= 0 and sites[j] < n):      #
        sites[j + 1] = sites[j]       # Последующая sites[j+1]=5 станет на первое место списка вмеcто sites[j]=2 [5=>2]
        j -= 1                            # Уменьшаем индекс j (при первой итерации получаем 0-1 = -1)
    sites[j + 1] = n                      # Устанавливаем сохранённое значение в найденное место 2=n

print(sites)

"""
                                                ++++++++ ПОЯСНЕНИЯ +++++++++
[2, 5, 1, 10, 50]
 0  1  2   3   4

for i in range(1, 5):                             (1) всего 4

n = 5 (sites[i]1)
j = 0 "(i - 1) = 1 - 1 = 0"

    while (0 >= 0 and 2 < 5)         sites[j] = > (j=0 из строки выше) = > 2
        sites[j + 1] = sites[j]      5 = 2  (5 становится на j0)
        j = -1 (0 - 1)
   
    sites[-1 + 1] = sites[j] = n => 5         [5, 2, 1, 10, 50]
==============================================================================
[5, 2, 1, 10, 50]                                 (2)
 0  1  2  3   4

n = 1 (sites[i]2)
j = 1 (2 - 1)

    while (1 >= 0 and 2 < 1)	условие неверно цикл 2 не выполнится
===============================================================================
[5, 2, 1, 10, 50]                                 (3)
 0  1  2  3   4

n = 10 (sites[i]3)
j = 2  (3 - 1)

    while(2 >= 0 and 1 < 10)
        sites[j + 1] = sites[j]		    10 = 1 (10 становится на j2)
        j = 1 ( 2 -1) 				    j = 1
    while(1 >= 0 and 2 < 10)
        sites[j + 1] = sites[j]		    10 = 2 (10 становится на j1)
        j = 0 (1 - 1) 				    j = 0
    while(0 >= 0 and 5 < 10)
        sites[j + 1] = sites[j]  		10 = 5 (10 становится на j0)
        j = -1 (0 - 1)				    j = -1 (условие while прекращается)

    sites[-1+1]=(sites[j]0) = n => 10   [10, 5, 2, 1, 50]
===============================================================================
[10, 5, 2, 1, 50]                                (4)
 0   1  2  3  4

n = 50 (sites[i]4)
j = 3  (4-1)

    while (3 >= 0 and 1 < 50)
        sites[j + 1] = sites[j]         50 = 1  (50 становится на j3)
        j = 2 (3 - 1)                   j = 2
    while (2 >= 0 and 2 < 50)
        sites[j + 1] = sites[j]         50 = 2  (50 становитсяна j2)
        j = 1 (2 - 1)                   j = 1
    while (1 >= 0 and 5 < 50)
        sites[j + 1] = sites[j]         50 = 5  (50 становитсяна j1)
        j = 0 (1 - 1)                   j = 0
    while (0 >= 0 and 10 < 50)
        sites[j + 1] = sites[j]         50 = 10 (50 становится на j0)
        j = -1(0 - 1)                   j = -1  (условие while прекращается)

    sites[-1+1]=(sites[j]0) = n => 50   [50, 10, 5, 2, 1]
    
РЕЗУЛЬТАТ: [50, 10, 5, 2, 1]
===============================================================================
"""
# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Сортировка символов

def stringSort(s):
    ret = ""
    code = []
    for i in s:                         # Формируем список кодов
        code.append(ord(i))             # [1071, 1070, 1069, 1068...]
    for i in range(1, len(code)):       # Сортируем сначала коды символов по "сортировке вставками" методом выше
        n = code[i]
        j = i - 1

        while(j >= 0 and code[j] > n):  # Здесь в отличии от прошлого алгоритма используем знак > потому что строку
            code[j + 1] = code[j]       # формируем с меньшего значения (A = 1040, Я = 1071) [А, Б, В, Г...]
            j -= 1
        code[j + 1] = n                 # [1040, 1041, 1042, 1043...]

    for i in code:                      # Формируем строку по кодам
        ret += chr(i)                   # Заносим упорядоченные коды => символы в переменную накопитель
    return ret                          # Возвращаем переменную со строкой (символами)

m = "ЯЮЭЬЫЪЩШЧЦХФУТСРПОНМЛКЙИЗЖЕДГВБА"
m = stringSort(m)
print(m)

# РЕЗУЛЬТАТ: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Встроенная сортировка

