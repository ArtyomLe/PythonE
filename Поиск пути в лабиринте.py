
# Двумерный список с данными лабиринта
a = []
a.append([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])
a.append([-1,  0, -1,  0,  0,  0, -1,  0,  0,  0, -1])
a.append([-1,  0,  0,  0, -1,  0, -1,  0, -1,  0, -1])
a.append([-1,  0, -1,  0, -1,  0,  0,  0, -1,  0, -1])
a.append([-1,  0, -1,  0, -1, -1, -1, -1, -1,  0, -1])
a.append([-1,  0, -1,  0,  0,  0,  0,  0, -1,  0, -1])
a.append([-1,  0, -1, -1, -1, -1, -1, -1, -1,  0, -1])
a.append([-1,  0,  0,  0,  0,  0,  0,  0, -1,  0, -1])
a.append([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])

# Метод вывода лабиринта на экран
def printLab(a):
    for i in a:                             # Перебираем список, если элемент равен нулю, то выводим 4 пробела
        for j in i:
            if (j == 0):
                print("    ", end="")
            elif (j == -1):
                print("****", end="")
            else:
                if (j < 10):                # Если число меньше 10 то добавляем в начале ноль (01, 02, 03) для эстетики
                    print(f" 0{j} ", end="")
                else:
                    print(f" {j} ", end="")
        print()
    print()

# МЕТОД ПОИСКА ПУТИ
def findPath(a, x, y, number):
    a[x][y] = number
    if (a[x + 1][y] == 0):                  # Первое условие рекурсии, проверяющее путь ВНИЗ (стенка = -1, проход = 0)
        findPath(a, x + 1, y, number + 1)

    if (a[x][y + 1] == 0):                  # Второе условие рекурсии, проверяющее путь ВПРАВО
        findPath(a, x, y + 1, number + 1)

    if (a[x][y - 1] == 0):                  # Третье условие рекурсии, проверяющее путь ВЛЕВО
        findPath(a, x, y - 1, number + 1)

    if (a[x - 1][y] == 0):                  # Четвёртое условие рекурсии, проверяющее путь ВВЕРХ
        findPath(a, x - 1, y, number + 1)


# ПОЛУЧАЕМ КООРДИНАТЫ НАЙДЕННОГО ПУТИ
def getRoad(a, x, y):
    res = []

    res.append([x, y])
    if (a[x + 1][y] == a[x][y] - 1):
        return res + getRoad(a, x + 1, y)
    if (a[x - 1][y] == a[x][y] - 1):
        return res + getRoad(a, x - 1, y)
    if (a[x][y + 1] == a[x][y] - 1):
        return res + getRoad(a, x, y + 1)
    if (a[x][y - 1] == a[x][y] - 1):
        return res + getRoad(a, x, y - 1)

    return res

# ОСНОВНОЕ ТЕЛО ПРОГРАММЫ

print("До обработки:")
printLab(a)

findPath(a, 1, 1, 1)                        # ищем путь ИЗ ТОЧКИ с координатами 1, 1

print("После обработки:")
printLab(a)

road = getRoad(a, 7, 9)                     # Нахождение координат пути для достижения конечной точки (7, 9)
road.reverse()

print("Координаты пути:")
for i in road:
    print(i)
